server:
  port: 9000


spring:
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:3306/todaysroom?characterEncoding=UTF-8&serverTimezone=UTC
    username: sseok
    password: sseok1979

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true #To beautify or pretty print the SQL
        show_sql: true #show sql

  # File 크기
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB


  data:
    redis:
      host: localhost
      port: 6379

#Spring Security OAuth2
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 615204378216-9e3hee2pd8s9l3899s7e6bli4cml6ar9.apps.googleusercontent.com
            client-secret: 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
            scope: profile, email

          naver:
            client-id: fGiskRe02dWApWcmBU4_
            client-secret: 1pFqDxQSux
            redirect-uri: http://localhost:9000/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope: name, email, profile_image
            client-name: Naver

          kakao:
            client-id: 6f3ec3c70b15ed635ba3c7f0cc46ae82
            client-secret: frpoE0zEcu33Tj7o4Jrt3LdZFjF3jz01
            redirect-uri: http://localhost:9000/login/oauth2/code/kakao
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            scope: profile_nickname, profile_image
            client-name: Kakao

        provider:
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id


# JWT
#HS512 알고리즘을 사용할 것이기 때문에 512bit, 즉 64byte 이상의 secret key를 사용해야 한다.
#echo 'silvernine-tech-spring-boot-jwt-tutorial-secret-silvernine-tech-spring-boot-jwt-tutorial-secret'|base64
jwt:
  header: Authorization
  secret: eyJSb2xlIjoiQWRtaW4iLCJJc3N1ZXIiOiJJc3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsImV4cCI6MTY3OTU0OTIwNiwiaWF0IjoxNjc5NTQ5MjA2fQyZXQK1

  token-validity-in-seconds: 1800
  refresh-token-validity-in-sec: 1209600

# oauth2 url
oauth:
  redirect-url-guest: http://localhost:8080/signup
  redirect-url-user: http://localhost:8080/


# File
# 서버 이미지 자원을 사용하기 위해서는 resources/static에 이미지가 저장되어 있어야함
# 나중에 배포하게 되면 클라이언트 코드 빌드되면서 resource 폴더가 clear 되기 때문에 경로 수정 필요
file:
  directory-path: src/main/resources/static/upload-dir

housedeal:
  api:
    host: http://openapi.molit.go.kr/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTradeDev
    secret: pCdkSDANrV7zkQGjPViu1HLx4nhmwFVntCq9+SjMfyHXgRsEPzteAp5etq0sh3bRM8ZTPCb2RHmAvz5qY3kRBg==

# Log
logging:
  level:
    org.hibernate:
      type.descriptor.sql: trace #show parameter binding
      SQL: DEBUG

